########################################################## 
###### Is the weather endpoint ok? The page we are now on is just a ball of json
########################################################## 


function getYYYYMMDD() {
var date = new Date() 
  var year = date.getFullYear()
  var month = (date.getMonth() + 1).toString().padStart(2, '0')
  var day = date.getDate().toString().padStart(2, '0')
  return year + month + day
}
var substring = getYYYYMMDD()
var pageContent = document.body.innerHTML  
  if (pageContent.includes(substring)) {
    return true
  } else { 
  return false
  }


## Is analytics for 'pageview' ready? 

return new Promise((r) => { 
  setTimeout(() => { 
    window.analytics.ready.then(()=> { 
    const flag = window.analytics.analytics.getState("track")?.history.filter((entry)=> entry.event === "page-view")
        if ( flag !== undefined && flag?.length >= 1 ) {
            r(true) 
        } else { 
         window.analytics.analytics.once("track", ({payload})=>{ 
               r(payload.type === "track" && payload.event === "page-view")               
         })  
        
        } 

    }) 
  }, 5000);
}) 


########################################################## 
###### Datadog for listening to outgoing http calls: 
########################################################## 

const needed=[
//"https://googleads.g.doubleclick.net",
//"https://adservice.google.com/ddm"
"dpm.demdex.net",
"https://shop.lululemon.com/api/analytics/adobe/b/ss/"
]
let found = []

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function getCalls() {
    const x = window.performance.getEntriesByType('resource').map((entry) => {
        let foundIt = false 
        needed.forEach((thing)=> { 
          if ( entry.name.includes(thing)) { 
            found.push(entry.name)
            foundIt = true 
            }
        })
        //if (  foundIt == true) { 
        //  console.error("YAY " + entry.name ) 
        //}         
        return {
            url: entry.name,
            http: entry.response ? entry.response.status : null
        }
    });
    return x
}

async function main(ms) {
    await sleep(ms);
    const collection = getCalls()
    return collection
}
const x = await main(15000)

let isOk = false
// TODO! Need a better rule to determine success!
if ( found.length >= needed.length ) { 
  isOk = true 
} else {
console.error("found " + found.length + "  needed " + needed.length + "   isOk " + isOk )
}
return isOk

########################################################## 
###### A selinium script: 
########################################################## 

from seleniumwire import webdriver  # Import from seleniumwire
from common import cyan, green,yellow,magenta
import time
driver = webdriver.Firefox()

def isIgnore( candidate):
    skip = [
        "lululemon.com"
    ]
    ignore = False 
    for x in skip: 
        if x in candidate:
            ignore = True
    return ignore

def gotoPage(url): 
    driver.get(url) 
    for x in range(30):
        time.sleep(1)
        cyan(x)

    javascript_code = """
    function collectNetworkCalls() {
        var networkCalls = [];
        var originalFetch = window.fetch;
        window.fetch = function() {
            var request = arguments[0];
            networkCalls.push(request.url);

            return originalFetch.apply(this, arguments);
        };
        return networkCalls;
    }
    return collectNetworkCalls();
    """
    # Execute the js get the results!
    network_calls = driver.execute_script(javascript_code)
    print("Network Calls:", network_calls)

def finish():
    for request in driver.requests:
        if "google-analytics.com" in request.url: 
            cyan( request.url)
        else:
            magenta(request.url )
    driver.close() 

if __name__ == "__main__":
    urls = [ 
        "https://shop.lululemon.com/"
    ]
    for x in urls: 
        start_time = time.time()
        gotoPage(x)
        end_time = time.time()
        elapsed_time = end_time - start_time
        cyan("{} {} ".format(elapsed_time, x))
    finish()
    
    
########################################################## 
########### TDD datadog func! 
########################################################## 

//// Mock: window.performance.getEntriesByType("foo")
const window = {
    performance: {
        getEntriesByType: () => [{name:"dpm.demdex.net"}, {name:"abc.com"}, {name:"xyz.com"}, {name:"https://shop.lululemon.com/api/analytics/adobe/b/ss/blahblahblah"}]
    }
}
async function datadog() { 
  //////////// ACTUAL LOGIC GOES HERE!
}
async function runner () { 
  console.log("NOTE: THis will pause for 15 seconds")
  const x = await datadog() 
  console.log("RESULT: " + x )
} 
runner() 
